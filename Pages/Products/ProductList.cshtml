@page
@model Indotalent.Pages.Products.ProductListModel
@{
    Layout = "~/Pages/Shared/AdminLTE/_Admin.cshtml";
    var statusMessage = Model.StatusMessage;
    Model.StatusMessage = string.Empty;
    ViewData["Module"] = "Inventory";
}

<style>
    .issue-button {
        background-color: #28a745 !important;
        color: white !important;
        border: none !important;
        padding: 6px 12px !important;
        border-radius: 4px !important;
        transition: all 0.2s ease-in-out !important;
        display: inline-flex !important;
        align-items: center !important;
        gap: 4px !important;
        font-size: 12px !important;
        min-width: 80px !important;
        justify-content: center !important;
    }

    .issue-button:hover {
        background-color: #218838 !important;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1) !important;
        transform: translateY(-1px) !important;
    }

    .issue-button:active {
        transform: translateY(0) !important;
        box-shadow: none !important;
    }

    .issue-button .e-btn-icon {
        font-size: 14px !important;
        margin-right: 4px !important;
    }
</style>

<div class="row">
    <div class="col-12">
        <div id="Grid"></div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            showStatusMessage('@statusMessage');

            var grid = new ej.grids.Grid({
                dataSource: new ej.data.DataManager({
                    url: '/odata/Product',
                    adaptor: new ej.data.ODataV4Adaptor()
                }),
                allowFiltering: true,
                allowSorting: true,
                allowSelection: true,
                allowGrouping: true,
                allowTextWrap: true,
                allowResizing: true,
                allowPaging: true,
                allowExcelExport: true,
                filterSettings: { type: 'CheckBox' },
                sortSettings: { columns: [{ field: 'CreatedAtUtc', direction: 'Descending' }] },
                pageSettings: { currentPage: 1, pageSize: 20, pageSizes: ["10", "20", "50", "100", "200", "All"] },
                selectionSettings: { persistSelection: true, type: 'Single' },
                autoFit: true,
                showColumnMenu: true,
                gridLines: 'Horizontal',
                columns: [
                    { type: 'checkbox', width: 100 },
                    {
                        field: 'RowGuid', isPrimaryKey: true, headerText: 'RowGuid', visible: false
                    },
                    { field: 'CreatedAtUtc', width: 100, format: 'yyyy-MM-dd HH:ss', textAlign: 'Left', type: 'dateTime' },
                    { field: 'Name', width: 100 },
                    { field: 'Number', width: 100 },
                    { field: 'ProductGroup', width: 100 },
                    { field: 'UnitMeasure', width: 100 },
                    { field: 'Physical', width: 100, textAlign: 'Center', displayAsCheckBox: true, type: 'boolean' },
                    { field: 'UnitPrice', width: 100, type: 'number', textAlign: 'Right', format: 'N2' },
                    {
                        headerText: 'Actions',
                        width: 120,
                        template: '#issueButtonTemplate'
                    }
                ],
                toolbar: [
                    'ExcelExport', 'Search',
                    { type: 'Separator' },
                    { text: 'Add', tooltipText: 'Add', prefixIcon: 'e-add', id: 'AddCustom' },
                    { text: 'Edit', tooltipText: 'Edit', prefixIcon: 'e-edit', id: 'EditCustom' },
                    { text: 'Delete', tooltipText: 'Delete', prefixIcon: 'e-delete', id: 'DeleteCustom' },
                ],
                beforeDataBound: () => {
                },
                dataBound: function () {
                    grid.toolbarModule.enableItems(['EditCustom', 'DeleteCustom'], false);
                    grid.autoFitColumns(['CreatedAtUtc', 'Name', 'Number', 'ProductGroup', 'UnitMeasure', 'Physical', 'UnitPrice', 'Actions']);
                    
                    // Add click handlers for issue buttons after grid is bound
                    document.querySelectorAll('.issue-button').forEach(button => {
                        button.addEventListener('click', function(e) {
                            e.preventDefault();
                            const rowGuid = this.getAttribute('data-rowguid');
                            handleIssueClick(rowGuid);
                        });
                    });
                },
                excelExportComplete: () => {
                },
                rowSelected: () => {
                    if (grid.getSelectedRecords().length == 1) {
                        grid.toolbarModule.enableItems(['EditCustom', 'DeleteCustom'], true);
                    } else {
                        grid.toolbarModule.enableItems(['EditCustom', 'DeleteCustom'], false);
                    }
                },
                rowDeselected: () => {
                    if (grid.getSelectedRecords().length == 1) {
                        grid.toolbarModule.enableItems(['EditCustom', 'DeleteCustom'], true);
                    } else {
                        grid.toolbarModule.enableItems(['EditCustom', 'DeleteCustom'], false);
                    }
                },
                rowSelecting: () => {
                    if (grid.getSelectedRecords().length) {
                        grid.clearSelection();
                    }
                },
                toolbarClick: (args) => {
                    if (args.item.id === 'Grid_excelexport') {
                        grid.excelExport();
                    }

                    if (args.item.id === 'AddCustom') {
                        var formUrl = '/Products/ProductForm' + '?action=create';
                        window.location.href = formUrl;
                    }

                    if (args.item.id === 'EditCustom') {
                        if (grid.getSelectedRecords().length) {
                            var selectedRowGuid = grid.getSelectedRecords()[0].RowGuid;
                            var formUrl = '/Products/ProductForm?rowGuid=' + selectedRowGuid + '&action=edit';
                            window.location.href = formUrl;
                        }
                    }

                    if (args.item.id === 'DeleteCustom') {
                        if (grid.getSelectedRecords().length) {
                            dialogObj = ej.popups.DialogUtility.confirm({
                                title: ' Delete Items',
                                content: "Are you sure you want to permanently delete these items?",
                                okButton: {
                                    click: () => {
                                        dialogObj.hide();
                                        var selectedRowGuid = grid.getSelectedRecords()[0].RowGuid;
                                        var formUrl = '/Products/ProductForm?rowGuid=' + selectedRowGuid + '&action=delete';
                                        window.location.href = formUrl;
                                    }
                                },
                                cancelButton: { click: () => { dialogObj.hide(); } },
                                position: { X: 'center', Y: 'center' },
                                closeOnEscape: true
                            });
                        }
                    }
                }
            });

            grid.appendTo('#Grid');

            function handleIssueClick(rowGuid) {
                // Navigate to the issue form or handle the issue action
                var formUrl = '/Products/ProductIssue?rowGuid=' + rowGuid;
                window.location.href = formUrl;
            }
        });
    </script>

    <script type="text/x-template" id="issueButtonTemplate">
        <button class="e-btn e-small issue-button" data-rowguid="${RowGuid}">
            <span class="e-btn-icon e-icons e-arrow-right-up"></span>
            Issue
        </button>
    </script>
}